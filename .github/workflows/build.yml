name: Build PDF Cutter Application

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }}
    permissions:
      contents: write
      packages: write
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            output_name: pdf_cutter.exe
            asset_name: pdf-cutter-windows.exe
            asset_zip_name: pdf-cutter-windows.zip
          - os: macos-latest
            output_name: pdf_cutter
            asset_name: pdf-cutter-macos
            asset_zip_name: pdf-cutter-macos.zip
          - os: ubuntu-latest
            output_name: pdf_cutter
            asset_name: pdf-cutter-linux
            asset_zip_name: pdf-cutter-linux.zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install nuitka
          pip install -r requirements.txt

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk libxcb-xinerama0 libxcb-cursor0 imagemagick

      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          brew install imagemagick
          
      - name: Prepare icons for all platforms
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            # macOS用の.icnsファイル作成
            mkdir -p app.iconset
            convert favicon.ico -resize 16x16 app.iconset/icon_16x16.png
            convert favicon.ico -resize 32x32 app.iconset/icon_16x16@2x.png
            convert favicon.ico -resize 32x32 app.iconset/icon_32x32.png
            convert favicon.ico -resize 64x64 app.iconset/icon_32x32@2x.png
            convert favicon.ico -resize 128x128 app.iconset/icon_128x128.png
            convert favicon.ico -resize 256x256 app.iconset/icon_128x128@2x.png
            convert favicon.ico -resize 256x256 app.iconset/icon_256x256.png
            convert favicon.ico -resize 512x512 app.iconset/icon_256x256@2x.png
            convert favicon.ico -resize 512x512 app.iconset/icon_512x512.png
            convert favicon.ico -resize 1024x1024 app.iconset/icon_512x512@2x.png
            iconutil -c icns app.iconset -o app.icns
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            # Linux用のPNGアイコン作成
            convert favicon.ico -resize 256x256 app.png
          fi

      - name: Build with Nuitka (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          python -m nuitka --onefile --follow-imports --plugin-enable=tk-inter --disable-console --windows-icon-from-ico=favicon.ico --output-dir=dist --output-filename=${{ matrix.output_name }} --remove-output main.py

      - name: Build with Nuitka (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          python -m nuitka --standalone --follow-imports --plugin-enable=tk-inter --macos-app-icon=app.icns --output-dir=dist --macos-app-name=${{ matrix.output_name }} --remove-output main.py

      - name: Build with Nuitka (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          python -m nuitka --onefile --follow-imports --plugin-enable=tk-inter --linux-icon=app.png --output-dir=dist --output-filename=${{ matrix.output_name }} --remove-output main.py

      - name: Create ZIP archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd dist
          powershell Compress-Archive -Path ${{ matrix.output_name }} -DestinationPath ../${{ matrix.asset_zip_name }}
          cd ..

      - name: Create ZIP archive (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd dist
          zip -r ../${{ matrix.asset_zip_name }} ${{ matrix.output_name }}.app
          cd ..

      - name: Create ZIP archive (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd dist
          zip -r ../${{ matrix.asset_zip_name }} ${{ matrix.output_name }}
          cd ..

      - name: Upload build artifacts (ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_zip_name }}
          path: ${{ matrix.asset_zip_name }}

      - name: Create GitHub release and upload asset
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            # PDF_Cutter ${{ github.ref_name }}
            
            ## Changes

          files: ${{ matrix.asset_zip_name }}